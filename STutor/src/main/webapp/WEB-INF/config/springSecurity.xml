<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">


<!-- we need a structure to avoid things like this, otherwise we'd need to restrict access to each individual site.
for example, we could have a /Stutor/main/... -> pattern="/main*" structure where only logged in users have access. -->

	<security:http auto-config="true" use-expressions="true" access-denied-page="/access-denied">
		<security:intercept-url pattern="/login" access="permitAll" />		
		<security:intercept-url pattern="/studentMain" access="hasRole('ROLE_USER')" />	
		<security:intercept-url pattern="/tutorMain" access="hasRole('ROLE_USER')" />		
		<security:form-login login-page="/login" authentication-failure-url="/login?error=true" default-target-url="/afterLogin" />
		<security:logout invalidate-session="true" logout-success-url="/login" logout-url="/logout" />
	</security:http>

	<security:authentication-manager>
						<security:authentication-provider user-service-ref="customUserDetailsService">
						 <security:password-encoder hash="sha">
            				<security:salt-source user-property="username"/></security:password-encoder>
						</security:authentication-provider>
						
	</security:authentication-manager>

	
	

</beans>
