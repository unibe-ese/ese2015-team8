<?xml version="1.0" encoding="UTF-8" ?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">


<!-- we need a structure to avoid things like this, otherwise we'd need to restrict access to each individual site.
for example, we could have a /Stutor/main/... -> pattern="/main*" structure where only logged in users have access. -->

	<http auto-config="true" use-expressions="true" >
		<access-denied-handler error-page="/accessDenied"/>
		<csrf disabled="true"/>
		<intercept-url pattern="/login" access="hasRole('ROLE_ANONYMOUS')" />		
		<intercept-url pattern="/afterLogin" access="hasRole('ROLE_USER')" />		
			<intercept-url pattern="/newAccount" access="hasRole('ROLE_ANONYMOUS')" />		
					<intercept-url pattern="/show" access="hasRole('ROLE_USER')" />		
		<form-login login-page="/login" authentication-failure-url="/login?error=true" default-target-url="/afterLogin" />
		<logout invalidate-session="true" logout-success-url="/login" logout-url="/logout" />
	</http>

	<authentication-manager>
						<authentication-provider user-service-ref="customUserDetailsService">
						 <password-encoder hash="sha">
            				<salt-source user-property="username"/></password-encoder>
						</authentication-provider>
						
	</authentication-manager>

	
	

</beans:beans>
